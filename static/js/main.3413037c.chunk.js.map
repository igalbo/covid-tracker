{"version":3,"sources":["components/InfoBox/InfoBox.js","util.js","components/Map/Map.js","components/Table/Table.js","components/LineGraph/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","index","Circle","key","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","then","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3413037c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './InfoBox.css';\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\"\r\n\r\nfunction InfoBox({title, cases, isRed, active, total, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className = {`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                <Typography  className = \"infoBox__title\" color = \"textSecondary\">{title}</Typography>\r\n\r\n                <h2 className = {`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n                <Typography className = \"infoBox_total\" color = \"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    multiplier: 50,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    multiplier: 75,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    multiplier: 200,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => b.cases - a.cases);\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//draw circles on the map\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country, index) => (\r\n    <Circle\r\n      key={index}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-cases\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"../../util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }, index) => (\r\n        <tr key={index}>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n      );\r\n      const data = await response.json();\r\n      let chartData = buildChartData(data, casesType);\r\n      setData(chartData);\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox/\";\nimport Map from \"./components/Map\";\nimport \"./App.css\";\nimport Table from \"./components/Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./components/LineGraph/LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([34.8074, -40.4796]);\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      const response = await fetch(\"https://disease.sh/v3/covid-19/countries\");\n      const data = await response.json();\n      const countries = data.map((country) => ({\n        name: country.country,\n        value: country.countryInfo.iso2,\n      }));\n\n      const sortedData = sortData(data);\n      setTableData(sortedData);\n      setMapCountries(data);\n      setCountries(countries);\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    const response = await fetch(url);\n    const data = await response.json();\n\n    setCountry(countryCode);\n    setCountryInfo(data);\n    if (countryCode !== \"worldwide\") {\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]); //lat: 34.8074, lng: -40.4796\n    } else {\n      setMapCenter([34.8074, -40.4796]);\n      setMapZoom(3);\n    }\n    setMapZoom(4);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country, index) => (\n                <MenuItem value={country.value} key={index}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={countryInfo.cases}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={countryInfo.recovered}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={countryInfo.deaths}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app_graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}